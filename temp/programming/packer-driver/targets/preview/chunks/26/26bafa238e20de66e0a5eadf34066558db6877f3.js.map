{"version":3,"sources":["file:///D:/GAMIXLABS/Solitaire%20-%20Copy/assets/Script/ReaveldCard.ts"],"names":["_decorator","Component","Node","Label","Vec2","Vec3","Color","PosSnap","StackPos","TouchEnd","ccclass","property","ReaveldCard","cardColor","cardace","cardNumber","touchStart","offSet","newPosition","lastPosition","zoomPercentage","lastZoomPercentage","gameS","parentToCheck","value","valueString","suitofCard","touchEndPos","movableArray","childIndex","childrenLength","onLaod","init","data","cardFace","string","suit","cardRank","rank","cardRank2","color","node","on","EventType","TOUCH_START","onTouchStart","bind","TOUCH_MOVE","onMoveStart","TOUCH_END","onTouchEnd","e","getUILocation","subtract","getParent","getPosition","console","log","children","length","indexOf","window","moveCard","moveStack","childs","index","element","nodePos","setPosition","x","y","p","TouchEndS1","xl","xr","emit","cardPos","stack1","Child","parent","TouchEndS2","stack2","TouchEndS3","stack3","TouchEndS4","stack4","TouchEndS5","stack5","TouchEndS6","stack6","TouchEndS7","stack7"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, TERRAIN_HEIGHT_BASE, color, Label, Vec2, Vec3, Touch, Color, math, systemEvent } from 'cc';\r\nimport { SUPPORT_JIT } from 'cc/env';\r\nimport { cardMove, cardRanks, Colour, DCard, PosSnap, Ranks, StackPos, Suits, TouchEnd } from './GameConstant';\r\nimport { GameScreen } from './GameScreen';\r\nconst { ccclass, property } = _decorator;\r\n\r\n\r\n@ccclass('ReaveldCard')\r\nexport default class ReaveldCard extends Component {\r\n    @property(Label)\r\n    cardRank: Label;\r\n    @property(Label)\r\n    cardRank2: Label;\r\n    @property(Label)\r\n    cardFace: Label;\r\n    @property(Node)\r\n    faceUp: Node;\r\n    @property(Node)\r\n    faceDown: Node;\r\n\r\n    public cardColor: string;\r\n    public cardace: string;\r\n    public cardNumber: string;\r\n    public touchStart = new Vec2();\r\n    public offSet = new Vec2();\r\n    public newPosition = new Vec3();\r\n    public lastPosition = new Vec2()\r\n    public zoomPercentage = 100;\r\n    public lastZoomPercentage = 100;\r\n    public gameS: GameScreen;\r\n    public parentToCheck: string;\r\n    public value: number;\r\n    public valueString: string;\r\n    suitofCard: any;\r\n    touchEndPos: Vec2;\r\n    movableArray: Node[] = [];\r\n    childIndex: number;\r\n    childrenLength: number;\r\n\r\n\r\n    onLaod() {\r\n    }\r\n    init(data, movableArray) {\r\n        // let get = this.game.Shuffel(data)\r\n        // console.log(get);\r\n\r\n        // this.rankValue(data.rank);\r\n        this.movableArray = movableArray;\r\n        this.cardFace.string = data.suit;\r\n        this.cardRank.string = data.rank;\r\n        this.cardRank2.string = data.rank;\r\n        this.value = data.value\r\n        this.cardNumber = data.rank;\r\n        if (this.cardFace.string == '♥' || this.cardFace.string == '♦') {\r\n            this.cardace = data.suit;\r\n            this.cardRank.color = new Color(255, 0, 0);\r\n            this.cardRank2.color = new Color(255, 0, 0);\r\n            this.cardFace.color = new Color(255, 0, 0);\r\n        }\r\n        else if (this.cardFace.string == '♠' || this.cardFace.string == '♣') {\r\n            this.cardRank.color = new Color(0, 0, 0, 255);\r\n            this.cardRank2.color = new Color(0, 0, 0, 255);\r\n            this.cardFace.color = new Color(0, 0, 0, 255);\r\n        }\r\n        this.node.on(Node.EventType.TOUCH_START, this.onTouchStart.bind(this));\r\n        this.node.on(Node.EventType.TOUCH_MOVE, this.onMoveStart.bind(this));\r\n        this.node.on(Node.EventType.TOUCH_END, this.onTouchEnd.bind(this));\r\n    }\r\n\r\n    onTouchStart(e: Touch) {\r\n        this.touchStart = e.getUILocation();\r\n        Vec2.subtract(this.offSet, this.node.getParent().getPosition() as unknown as Vec2, this.touchStart);\r\n        console.log(\"heyys\", this.cardace, this.cardNumber, this.value);\r\n        this.childrenLength = this.node.getParent().children.length;\r\n        this.childIndex = this.node.getParent().children.indexOf(this.node)\r\n        console.log(\"children Length\", this.childrenLength);\r\n        console.log(\"childIndex\", this.childIndex);\r\n\r\n    }\r\n    onMoveStart(e: Touch | null) {\r\n        this.lastPosition = e.getUILocation();\r\n        Vec2.subtract(this.offSet, this.touchStart, this.lastPosition);\r\n        // let nodePos = this.node.getPosition() as unknown as Vec2;\r\n        // this.node.setPosition(nodePos.x - this.offSet.x, nodePos.y - this.offSet.y, 0.5);\r\n        this.touchStart = this.lastPosition;\r\n        window.moveCard = true;\r\n        this.moveStack(this.offSet)\r\n\r\n    }\r\n\r\n    moveStack(offSet) {\r\n        let childs = this.node.getParent().children;\r\n        for (let index = 0; index < childs.length; index++) {\r\n            if (index >= this.childIndex) {\r\n                const element = childs[index];\r\n                let nodePos = element.getPosition() as unknown as Vec2;\r\n                element.setPosition(nodePos.x - offSet.x, nodePos.y - offSet.y, 0.5);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    onTouchEnd(p: Touch | null) {\r\n        // console.log(\"PostionAtTheTouchEnd\", p.getUILocation());\r\n\r\n        let touchEndPos = p.getUILocation();\r\n\r\n        let nodePos = this.node.getPosition() as unknown as Vec2;\r\n        console.log(\"pa\", touchEndPos.x)\r\n        console.log(\"posxl\", TouchEnd.TouchEndS1);\r\n        // console.log(\"posxr\",);\r\n\r\n        if (touchEndPos.x < TouchEnd.TouchEndS1.xl && touchEndPos.x > TouchEnd.TouchEndS1.xr) {\r\n            // this.node.removeFromParent()\r\n            PosSnap.emit(\"stackPos\", { cardPos: StackPos.stack1, Child: this.node, parent: this.node.getParent() });\r\n        }\r\n\r\n        if (touchEndPos.x < TouchEnd.TouchEndS2.xl && touchEndPos.x > TouchEnd.TouchEndS2.xr) {\r\n            // this.node.removeFromParent()\r\n            PosSnap.emit(\"stackPos\", { cardPos: StackPos.stack2, Child: this.node, parent: this.node.getParent() });\r\n        }\r\n\r\n        if (touchEndPos.x < TouchEnd.TouchEndS3.xl && touchEndPos.x > TouchEnd.TouchEndS3.xr) {\r\n            // this.node.removeFromParent()\r\n            PosSnap.emit(\"stackPos\", { cardPos: StackPos.stack3, Child: this.node, parent: this.node.getParent() });\r\n        }\r\n\r\n        if (touchEndPos.x < TouchEnd.TouchEndS4.xl && touchEndPos.x > TouchEnd.TouchEndS4.xr) {\r\n            // this.node.removeFromParent()\r\n            // console.log(\"heyy\");\r\n            PosSnap.emit(\"stackPos\", { cardPos: StackPos.stack4, Child: this.node, parent: this.node.getParent() });\r\n        }\r\n\r\n        if (touchEndPos.x < TouchEnd.TouchEndS5.xl && touchEndPos.x > TouchEnd.TouchEndS5.xr) {\r\n            // this.node.removeFromParent()\r\n            PosSnap.emit(\"stackPos\", { cardPos: StackPos.stack5, Child: this.node, parent: this.node.getParent() });\r\n        }\r\n\r\n        if (touchEndPos.x < TouchEnd.TouchEndS6.xl && touchEndPos.x > TouchEnd.TouchEndS6.xr) {\r\n            // this.node.removeFromParent()\r\n            PosSnap.emit(\"stackPos\", { cardPos: StackPos.stack6, Child: this.node, parent: this.node.getParent() });\r\n        }\r\n\r\n        if (touchEndPos.x < TouchEnd.TouchEndS7.xl && touchEndPos.x > TouchEnd.TouchEndS7.xr) {\r\n            // this.node.removeFromParent()\r\n            PosSnap.emit(\"stackPos\", { cardPos: StackPos.stack7, Child: this.node, parent: this.node.getParent() });\r\n        }\r\n\r\n\r\n        // if (this.parentToCheck.toString() == 'ReavledCard') {\r\n        //     //console.log(\"herere_==><\")\r\n        //     DCard.emit(\"fromDeck\", this.node);\r\n        // }\r\n        // else {\r\n        //     // console.log(this.parentToCheck.toString());\r\n        //     cardMove.emit(\"snapCard\", this.node);\r\n        // }\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n"]}