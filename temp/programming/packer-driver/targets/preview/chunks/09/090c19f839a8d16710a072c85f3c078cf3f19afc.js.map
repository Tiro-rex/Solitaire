{"version":3,"sources":["file:///D:/GAMIXLABS/Solitaire/assets/Script/GameScreen.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Button","math","CARDS_ARRAY","GameManager","ReaveldCard","ccclass","property","GameScreen","arrayOfCard","arrayOfCard2","h","lastindex","start","Shuffel","fn","OnClick","length","creatCard","deck","interactable","card","cardPrefeb","reaveldCard","addChild","getComponent","init","splice","push","console","log","data","currIndex","randomInadex","Math","floor","random","stacklogic","stack","num","i","card1","children","cardNumber","defaultPlayArea","stackNumber","stack1","stack2","stack3","stack4","stack5","stack6","stack7"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;AAA4CC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,I,OAAAA,I;;AAGzFC,MAAAA,W,iBAAAA,W;;AACAC,MAAAA,W,iBAAAA,W;;AACFC,MAAAA,W;;;;;;;OACD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBX,U;;4BAGjBY,U,WADZF,OAAO,CAAC,YAAD,C,UAEHC,QAAQ,CAACR,MAAD,C,UAERQ,QAAQ,CAACT,IAAD,C,UAERS,QAAQ,CAACN,MAAD,C,UAERM,QAAQ;AAAA;AAAA,qC,UAERA,QAAQ,CAACT,IAAD,C,UAERS,QAAQ,CAACT,IAAD,C,UAERS,QAAQ,CAACT,IAAD,C,UAERS,QAAQ,CAACT,IAAD,C,WAERS,QAAQ,CAACT,IAAD,C,WAERS,QAAQ,CAACT,IAAD,C,WAERS,QAAQ,CAACT,IAAD,C,WAERS,QAAQ,CAACT,IAAD,C,2BAxBb,MACaU,UADb,SACgCX,SADhC,CAC0C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eA4BtCY,WA5BsC,GA4BjB,EA5BiB;AAAA,eA6BtCC,YA7BsC,GA6BhB,EA7BgB;AAAA,eA8BtCC,CA9BsC;AAAA,eA+BtCC,SA/BsC;AAAA;;AAkCtCC,QAAAA,KAAK,GAAG;AACJ,eAAKH,YAAL;AAAA;AAAA;AACA,eAAKI,OAAL,CAAa,KAAKJ,YAAlB;AACA,eAAKK,EAAL;AACH;;AACDC,QAAAA,OAAO,GAAG;AAEN,cAAI,KAAKL,CAAL,CAAOM,MAAP,IAAiB,EAArB,EAAyB;AACrB,iBAAKC,SAAL;AACA,iBAAKC,IAAL,CAAUC,YAAV,GAAyB,KAAzB;AAEH,WANK,CAON;;AACH;;AAGDF,QAAAA,SAAS,GAAG;AACR;AACA;AACA,cAAIG,IAAI,GAAGrB,WAAW,CAAC,KAAKsB,UAAN,CAAtB;AACA,eAAKC,WAAL,CAAiBC,QAAjB,CAA0BH,IAA1B;AACAA,UAAAA,IAAI,CAACI,YAAL;AAAA;AAAA,0CAA+BC,IAA/B,CAAoC,KAAKhB,YAAL,CAAkB,CAAlB,CAApC;AACA,eAAKA,YAAL,CAAkBiB,MAAlB,CAAyB,CAAzB,EAA4B,CAA5B;AACA,eAAKhB,CAAL,GAAS,KAAKF,WAAL,CAAiBmB,IAAjB,CAAsBP,IAAtB,CAAT;AACAQ,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKnB,CAA1B;AACH;;AAEDG,QAAAA,OAAO,CAACiB,IAAD,EAAO;AACV,cAAIC,SAAS,GAAGD,IAAI,CAACd,MAArB;AAAA,cAA6BgB,YAA7B;;AACA,iBAAOD,SAAS,IAAI,CAApB,EAAuB;AACnBC,YAAAA,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWjC,IAAI,CAACkC,MAAL,KAAgBJ,SAA3B,CAAf;AACAA,YAAAA,SAAS;AACT,aAACD,IAAI,CAACC,SAAD,CAAL,EAAkBD,IAAI,CAACE,YAAD,CAAtB,IAAwC,CAACF,IAAI,CAACE,YAAD,CAAL,EAAqBF,IAAI,CAACC,SAAD,CAAzB,CAAxC;AACH;;AACD,iBAAOD,IAAP;AACH;;AACDM,QAAAA,UAAU,CAACC,KAAD,EAAcC,GAAd,EAAmB;AAEzB,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAApB,EAAyBC,CAAC,EAA1B,EAA8B;AAC1B,gBAAIC,KAAK,GAAGzC,WAAW,CAAC,KAAKsB,UAAN,CAAvB;AACAmB,YAAAA,KAAK,CAAChB,YAAN;AAAA;AAAA,4CAAgCC,IAAhC,CAAqC,KAAKhB,YAAL,CAAkB,CAAlB,CAArC;AACA,iBAAKA,YAAL,CAAkBiB,MAAlB,CAAyB,CAAzB,EAA4B,CAA5B;AACAW,YAAAA,KAAK,CAACd,QAAN,CAAeiB,KAAf;AACH;;AACD,eAAK7B,SAAL,GAAiB0B,KAAK,CAACI,QAAN,CAAeJ,KAAK,CAACI,QAAN,CAAezB,MAAf,GAAwB,CAAvC,EAA0CQ,YAA1C;AAAA;AAAA,0CAAoEkB,UAArF;AACAd,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,KAAKlB,SAAzB;AACH;;AAEDG,QAAAA,EAAE,GAAG;AACD,eAAK,IAAIyB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,gBAAIF,KAAK,GAAG,KAAKM,eAAL,CAAqBJ,CAArB,CAAZ;AACA,iBAAKH,UAAL,CAAgBC,KAAhB,EAAuBE,CAAvB;AACH;AACJ;;AAEDI,QAAAA,eAAe,CAACC,WAAD,EAAc;AACzB;AACA,kBAAQA,WAAR;AAEI,iBAAK,CAAL;AACI,qBAAO,KAAKC,MAAZ;;AAEJ,iBAAK,CAAL;AACI,qBAAO,KAAKC,MAAZ;;AAEJ,iBAAK,CAAL;AACI,qBAAO,KAAKC,MAAZ;;AAEJ,iBAAK,CAAL;AACI,qBAAO,KAAKC,MAAZ;;AAEJ,iBAAK,CAAL;AACI,qBAAO,KAAKC,MAAZ;;AAEJ,iBAAK,CAAL;AACI,qBAAO,KAAKC,MAAZ;;AAEJ,iBAAK,CAAL;AACI,qBAAO,KAAKC,MAAZ;AArBR;AAwBH;;AAnHqC,O","sourcesContent":["\nimport { _decorator, Component, Node, Prefab, instantiate, EventMouse, Touch, Vec2, Vec3, Button, math } from 'cc';\nimport { Card } from './Card';\n\nimport { CARDS_ARRAY, CardType } from './GameConstant';\nimport { GameManager } from './GameManager';\nimport ReaveldCard from './ReaveldCard';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GameScreen')\nexport class GameScreen extends Component {\n    @property(Prefab)\n    cardPrefeb: Prefab;\n    @property(Node)\n    reaveldCard: Node;\n    @property(Button)\n    deck: (Button);\n    @property(GameManager)\n    game: GameManager;\n    @property(Node)\n    mainArea: Node\n    @property(Node)\n    stack1: Node\n    @property(Node)\n    stack2: Node\n    @property(Node)\n    stack3: Node\n    @property(Node)\n    stack4: Node\n    @property(Node)\n    stack5: Node\n    @property(Node)\n    stack6: Node\n    @property(Node)\n    stack7: Node\n\n\n\n    arrayOfCard: any[] = [];\n    arrayOfCard2: any[] = [];\n    h: any\n    lastindex: any;\n\n\n    start() {\n        this.arrayOfCard2 = CARDS_ARRAY;\n        this.Shuffel(this.arrayOfCard2);\n        this.fn();\n    }\n    OnClick() {\n        \n        if (this.h.length == 52) {\n            this.creatCard();\n            this.deck.interactable = false;\n\n        }\n        // this.getComponent(Card).init();\n    }\n\n\n    creatCard() {\n        //console.log(\"dhoom dhoom\");\n        // for (let i = 0; i < 1; i++) {\n        let card = instantiate(this.cardPrefeb);\n        this.reaveldCard.addChild(card);\n        card.getComponent(ReaveldCard).init(this.arrayOfCard2[0]);\n        this.arrayOfCard2.splice(0, 1);\n        this.h = this.arrayOfCard.push(card);\n        console.log(\"Array\", this.h);\n    }\n\n    Shuffel(data) {\n        let currIndex = data.length, randomInadex;\n        while (currIndex != 0) {\n            randomInadex = Math.floor(math.random() * currIndex);\n            currIndex--;\n            [data[currIndex], data[randomInadex]] = [data[randomInadex], data[currIndex]];\n        }\n        return data;\n    }\n    stacklogic(stack: Node, num) {\n\n        for (let i = 0; i < num; i++) {\n            let card1 = instantiate(this.cardPrefeb);\n            card1.getComponent(ReaveldCard).init(this.arrayOfCard2[0]);\n            this.arrayOfCard2.splice(0, 1);\n            stack.addChild(card1);\n        }\n        this.lastindex = stack.children[stack.children.length - 1].getComponent(ReaveldCard).cardNumber\n        console.log(\"last\", this.lastindex);\n    }\n\n    fn() {\n        for (let i = 1; i <= 7; i++) {\n            let stack = this.defaultPlayArea(i)\n            this.stacklogic(stack, i)\n        }\n    }\n\n    defaultPlayArea(stackNumber) {\n        // let stack: number;\n        switch (stackNumber) {\n\n            case 1:\n                return this.stack1\n\n            case 2:\n                return this.stack2\n\n            case 3:\n                return this.stack3\n\n            case 4:\n                return this.stack4\n\n            case 5:\n                return this.stack5\n\n            case 6:\n                return this.stack6\n\n            case 7:\n                return this.stack7\n\n        }\n    }\n}\n"]}