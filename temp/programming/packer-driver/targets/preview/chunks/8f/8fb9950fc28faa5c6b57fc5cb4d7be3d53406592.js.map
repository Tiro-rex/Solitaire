{"version":3,"sources":["file:///D:/GAMIXLABS/Solitaire/assets/Script/ReaveldCard.ts"],"names":["_decorator","Component","Node","Label","Vec2","Vec3","Color","Ranks","ccclass","property","ReaveldCard","cardColor","cardace","cardNumber","isMoving","distance","touchStart","offSet","newPosition","lastPosition","zoomPercentage","lastZoomPercentage","nodePos","init","data","cardFace","string","suit","cardRank","rank","cardRank2","color","node","on","EventType","TOUCH_START","onTouchStart","bind","TOUCH_MOVE","onMoveStart","TOUCH_END","onTouchEnd","e","_allTouches","length","_point","getUILocation","subtract","getParent","getPosition","console","log","setPosition","x","y","worldPosition","getCardValue_","Ace","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Jack","Queen","King","error"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, TERRAIN_HEIGHT_BASE, color, Label, Vec2, Vec3, Touch, Color } from 'cc';\nimport { Card } from './Card';\nimport { Colour, Ranks, Suits } from './GameConstant';\nimport { CARDS_ARRAY } from './GameConstant';\nimport { GameManager } from './GameManager';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('ReaveldCard')\nexport default class ReaveldCard extends Component {\n    @property(Label)\n    cardRank: Label;\n    @property(Label)\n    cardRank2: Label;\n    @property(Label)\n    cardFace: Label;\n    // @property(GameManager)\n    // game: GameManager;\n\n\n\n\n    cardColor: string;\n    cardace: string;\n    cardNumber: string;\n    isMoving: boolean;\n    distance: number;\n    touchStart = new Vec2();\n    offSet = new Vec2();\n    newPosition = new Vec3();\n    lastPosition = new Vec2()\n    zoomPercentage = 100;\n    lastZoomPercentage = 100;\n    nodePos: any;\n\n\n\n    init(data) {\n        // CARDS_ARRAY.values()\n        // console.log(data)\n\n        this.cardFace.string = data.suit;\n        this.cardRank.string = data.rank;\n        this.cardRank2.string = data.rank;\n        this.cardNumber = data.rank;\n        this.cardace = data.suit;\n        if (this.cardFace.string == '♥' || this.cardFace.string == '♦') {\n            this.cardRank.color = new Color(255, 0, 0);\n            this.cardRank2.color = new Color(255, 0, 0);\n            this.cardFace.color = new Color(255, 0, 0);\n        }\n        else if (this.cardFace.string == '♠' || this.cardFace.string == '♣') {\n            this.cardRank.color = new Color(0, 0, 0, 255);\n            this.cardRank2.color = new Color(0, 0, 0, 255);\n            this.cardFace.color = new Color(0, 0, 0, 255);\n        }\n\n        this.node.on(Node.EventType.TOUCH_START, this.onTouchStart.bind(this));\n        this.node.on(Node.EventType.TOUCH_MOVE, this.onMoveStart.bind(this));\n        this.node.on(Node.EventType.TOUCH_END, this.onTouchEnd.bind(this));\n        // this.game.mainArea();\n\n    }\n    onTouchStart(e: Touch) {\n        if (e._allTouches.length == 2) {\n            this.distance = 0;\n            this.distance = Vec2.distance(e._allTouches[0]._point, e._allTouches[1]._point);\n        }\n\n        this.touchStart = e.getUILocation();\n        Vec2.subtract(this.offSet, this.node.getParent().getPosition() as unknown as Vec2, this.touchStart);\n        console.log(\"heyys\", this.cardace, this.cardNumber);\n\n\n\n    }\n    onMoveStart(e: Touch) {\n        // if (e._allTouches.length == 1) {\n\n        // this.move(e);\n        // }\n        this.lastPosition = e.getUILocation();\n        Vec2.subtract(this.offSet, this.touchStart, this.lastPosition);\n        this.nodePos = this.node.getPosition() as unknown as Vec2;\n        this.node.setPosition(this.nodePos.x - this.offSet.x, this.nodePos.y - this.offSet.y, 0.5);\n        this.touchStart = this.lastPosition;\n        console.log(\"heyys3 \", this.node.getPosition());\n        console.log(\"lastPos\", this.lastPosition)\n        // this.node.worldPosition = this.newPosition;\n        // this.newPosition = new Vec3(nodePos.x - this.offSet.x, nodePos.y - this.offSet.y, 0.);\n        //this.getComponent(Card).mainArea();\n    }\n    onTouchEnd(e: Touch) {\n        this.node.setPosition(this.nodePos.x - this.offSet.x, this.nodePos.y - this.offSet.y, 0.5);\n        console.log(\"Position\", this.node.worldPosition);\n    }\n    private getCardValue_(data) {\n        switch (data.rank) {\n            case Ranks.Ace: return 1;\n            case Ranks.Two: return 2;\n            case Ranks.Three: return 3;\n            case Ranks.Four: return 4;\n            case Ranks.Five: return 5;\n            case Ranks.Six: return 6;\n            case Ranks.Seven: return 7;\n            case Ranks.Eight: return 8;\n            case Ranks.Nine: return 9;\n            case Ranks.Ten: return 10;\n            case Ranks.Jack: return 11;\n            case Ranks.Queen: return 12;\n            case Ranks.King: return 13;\n            default: console.error();\n        }\n    }\n\n\n\n}\n\n\n"]}