{"version":3,"sources":["file:///D:/GAMIXLABS/Solitaire/assets/Script/GameScreen.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Button","math","CARDS_ARRAY","GameManager","Pile","ReaveldCard","ccclass","property","GameScreen","arrayOfCard","arrayOfCard2","h","h2","lastindex","onLaod","start","Shuffel","generateCard","stack","OnClick","deck","interactable","creatCard","console","log","data","currIndex","length","randomInadex","Math","floor","random","i","defaultPlayArea","getComponent","init","card1","cardPrefeb","splice","push","stackNumber","stack1","stack2","stack3","stack4","stack5","stack6","stack7"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Prefab, instantiate, EventMouse, Touch, Vec2, Vec3, Button, math, Collider2D, ICollisionEvent, Collider, BoxCollider2D, Contact2DType, IPhysics2DContact, PhysicsSystem2D, } from 'cc';\nimport { Card } from './Card';\n\nimport { CARDS_ARRAY, CardType } from './GameConstant';\nimport { GameManager } from './GameManager';\nimport { Pile } from './Pile';\nimport ReaveldCard from './ReaveldCard';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GameScreen')\nexport class GameScreen extends Component {\n    @property(Prefab)\n    cardPrefeb: Prefab;\n    @property(Node)\n    reaveldCard: Node;\n    @property(Button)\n    deck: (Button);\n    @property(GameManager)\n    game: GameManager;\n    @property(Node)\n    mainArea: Node\n    @property(Node)\n    stack1: Node\n    @property(Node)\n    stack2: Node\n    @property(Node)\n    stack3: Node\n    @property(Node)\n    stack4: Node\n    @property(Node)\n    stack5: Node\n    @property(Node)\n    stack6: Node\n    @property(Node)\n    stack7: Node\n\n\n\n    arrayOfCard: any[] = [];\n    arrayOfCard2: any[] = [];\n    h: any\n    h2: any\n    lastindex: any;\n\n    // instantiationOfStack=true;\n\n    onLaod() {\n\n    } start() {\n        this.arrayOfCard2 = CARDS_ARRAY;\n        this.Shuffel(this.arrayOfCard2);\n        this.generateCard();\n\n        this.stack();\n    }\n    OnClick() {\n\n        if (this.h == 52) {\n\n            this.deck.interactable = false;\n        }\n        else {\n            this.creatCard();\n\n        }\n        // console.log(\"here-->\", this.h)\n        // this.getComponent(Card).init();\n    }\n\n\n    creatCard() {\n        //console.log(\"dhoom dhoom\");\n        // for (let i = 0; i < 1; i++) {\n        // let card = instantiate(this.cardPrefeb);/\n        // this.reaveldCard.addChild(card);\n        // card.getComponent(ReaveldCard).init(this.arrayOfCard2[0]);\n        // this.arrayOfCard2.splice(0, 1);\n        // console.log(\"heere-->\", this.arrayOfCard2.length)\n        // this.h = this.arrayOfCard.push(card);\n        console.log(\"Array\", this.h);\n        // card.getComponent(ReaveldCard).faceDown.active = false;\n    }\n\n    Shuffel(data) {\n        let currIndex = data.length, randomInadex;\n        while (currIndex != 0) {\n            randomInadex = Math.floor(math.random() * currIndex);\n            currIndex--;\n            [data[currIndex], data[randomInadex]] = [data[randomInadex], data[currIndex]];\n        }\n        return data;\n    }\n    // async stacklogic(stack: Node, num) {\n\n    //     for (let i = 0; i < num; i++) {\n    //         let card1 = instantiate(this.cardPrefeb);\n    //         card1.getComponent(ReaveldCard).init(this.arrayOfCard2[0]);\n    //         this.arrayOfCard2.splice(0, 1);\n    //         await this.delay(200, stack.addChild(card1));\n    //         this.h2 = this.arrayOfCard.push(card1);\n    //     }\n    //     let lastCard: ReaveldCard = stack.children[stack.children.length - 1].getComponent(ReaveldCard)\n    //     lastCard.faceDown.active = false;\n    //     lastCard.faceUp.active = true;\n    //     // console.log(\"last\", this.lastindex);\n    //     //console.log(\"array\", this.h2);\n    // }\n\n    stack() {\n        for (let i = 1; i <= 7; i++) {\n            let stack: Pile = this.defaultPlayArea(i).getComponent(Pile);\n            stack.init(i, this.arrayOfCard);\n\n        }\n    }\n    generateCard() {\n        let card1 = instantiate(this.cardPrefeb);\n        card1.getComponent(ReaveldCard).init(this.arrayOfCard2[0]);\n        this.arrayOfCard2.splice(0, 1);\n        this.arrayOfCard.push(card1);\n        // await this.delay(200, stack.addChild(card1));\n    }\n    defaultPlayArea(stackNumber) {\n        // let stack: number;\n        switch (stackNumber) {\n\n            case 1:\n                return this.stack1\n\n            case 2:\n                return this.stack2\n\n            case 3:\n                return this.stack3\n\n            case 4:\n                return this.stack4\n\n            case 5:\n                return this.stack5\n\n            case 6:\n                return this.stack6\n\n            case 7:\n                return this.stack7\n\n        }\n    }\n\n\n\n\n}\n"]}