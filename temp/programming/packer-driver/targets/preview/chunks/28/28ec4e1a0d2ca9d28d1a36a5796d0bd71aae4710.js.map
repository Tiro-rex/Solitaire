{"version":3,"sources":["file:///D:/GAMIXLABS/Solitaire/assets/Script/Pile.ts"],"names":["_decorator","Component","Vec2","Collider2D","PhysicsSystem2D","Contact2DType","cardMove","ReaveldCard","ccclass","property","Pile","offSet","cardR","snapParent","snapcard","start","instance","enable","coll","node","getComponent","on","BEGIN_CONTACT","onBeginContact","init","array","len","count","i","delay","addChild","children","faceDown","active","self","other","snapCardToParent","card","removeChild","index","length","removeListener","SortAlgo","milliseconds","Promise","resolve","setTimeout"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, EventMouse, Touch, Vec2, Vec3, Button, Collider2D, PhysicsSystem2D, Contact2DType, game } from 'cc';\nimport { Card } from './Card';\nimport { cardMove, CARDS_ARRAY } from './GameConstant';\nimport { GameScreen } from './GameScreen';\nimport ReaveldCard from './ReaveldCard';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('Pile')\nexport class Pile extends Component {\n    // @property(Node)\n    // deckOfCard: Node;\n\n    offSet = new Vec2();\n\n    public cardR: ReaveldCard;\n    snapParent: Node;\n    snapcard: boolean = false;\n\n    start() {\n        PhysicsSystem2D.instance.enable = true;\n        let coll = this.node.getComponent(Collider2D);\n        coll.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n        // this.cardR.getComponent(ReaveldCard)\n    }\n\n    async init(array, len, count) {\n        //console.log(array, len, count);\n        for (let i = 0; i < len; i++) {\n            await this.delay(200, this.node.addChild(array[count - 1 + i]));\n\n        }\n        this.node.children[len - 1].getComponent(ReaveldCard).faceDown.active = false;\n\n    }\n    onBeginContact(self: Collider2D, other: Collider2D) {\n        this.snapParent = self.node;\n        // if (self.tag == 1 && window.moveCard) {\n        cardMove.on(\"snapCard\", this.snapCardToParent, this)\n        // this.snapcard = true;\n        // console.log(\"stack-->\", self.tag);\n        // console.log(\"SnapP\", this.snapParent);\n        // console.log(\"here----> <\");\n        //   //  }\n        //     if (self.tag == 2 && window.moveCard) {\n        //         cardMove.on(\"snapCard\", this.snapCardToParent, this)\n        //         this.snapcard = true;\n        //         console.log(\"stack-->\", self.tag);\n        //     }\n        //     if (self.tag == 3 && window.moveCard) {\n        //         console.log(\"stack-->\", self.tag);\n        //         this.snapcard = true;\n        //         cardMove.on(\"snapCard\", this.snapCardToParent, this)\n        //     }\n        //     if (self.tag == 4 && window.moveCard) {\n        //         cardMove.on(\"snapCard\", this.snapCardToParent, this)\n        //         this.snapcard = true;\n        //         console.log(\"stack-->\", self.tag);\n        //     }\n        //         cardMove.on(\"snapCard\", this.snapCardToParent, this)\n        //         this.snapcard = true;\n        //     if (self.tag == 5 && window.moveCard) {\n        //         console.log(\"stack-->\", self.tag);\n        //     }\n        //     if (self.tag == 6 && window.moveCard) {\n        //         cardMove.on(\"snapCard\", this.snapCardToParent, this)\n        //         this.snapcard = true;\n        //         console.log(\"stack-->\", self.tag);\n        //     }\n        //     if (self.tag == 7 && window.moveCard) {\n        //         cardMove.on(\"snapCard\", this.snapCardToParent, this)\n        //         this.snapcard = true;\n        //         console.log(\"stack-->\", self.tag);\n        //     }\n    }\n\n\n    snapCardToParent(card) {\n\n        this.node.removeChild(card);\n        let index = this.node.children.length;\n        this.snapParent.addChild(card);\n        this.snapcard=true;\n        cardMove.removeListener(\"snapCard\", this.snapCardToParent, this)\n        this.node.children[index - 1].getComponent(ReaveldCard).faceDown.active = false;\n    }\n\n    //Algo\n    SortAlgo() {\n        ///  this.node.removeChild\n    }\n    delay(milliseconds: number, count): Promise<number> {\n        return new Promise<number>(resolve => {\n            setTimeout(() => {\n                resolve(count);\n            }, milliseconds);\n        });\n    }\n}"]}