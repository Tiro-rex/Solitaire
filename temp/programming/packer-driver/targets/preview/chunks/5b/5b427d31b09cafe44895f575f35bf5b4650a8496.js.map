{"version":3,"sources":["file:///D:/GAMIXLABS/Solitaire/assets/Script/Pile.ts"],"names":["_decorator","Component","GameManager","PileMaxFanOperation","ccclass","property","Pile","cardsChanged","maxFanChanged","cards_","maxFan_","length","maxFan","Math","max","oldMaxFan","op","redo","dotSetMaxFan"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;AAGXC,MAAAA,W,iBAAAA,W;;AAEAC,MAAAA,mB,iBAAAA,mB;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;sBAGjBM,I,WADZF,OAAO,CAAC,MAAD,C,UAGHC,QAAQ;AAAA;AAAA,qC,2BAHb,MACaC,IADb,SAC0BL,SAD1B,CACoC;AAAA;AAAA;;AAAA;;AAAA,eAKzBM,YALyB,GAKV,MAAM,CAAG,CALC;;AAAA,eAMzBC,aANyB,GAMT,MAAM,CAAG,CANA;;AAAA,eAOxBC,MAPwB,GAOP,EAPO;AAAA,eAWxBC,OAXwB,GAWN,GAXM;AAAA;;AAQf,YAANC,MAAM,GAAG;AAChB,iBAAO,KAAKF,MAAL,CAAYE,MAAnB;AACH;;AAEgB,YAANC,MAAM,GAAG;AAAE,iBAAO,KAAKF,OAAZ;AAAsB;;AAC3B,YAANE,MAAM,CAACA,MAAD,EAAiB;AAC9BA,UAAAA,MAAM,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYF,MAAZ,CAAT;AACA,cAAI,KAAKF,OAAL,KAAiBE,MAArB,EACI;AACJ,cAAMG,SAAS,GAAG,KAAKL,OAAvB;AACA,cAAMM,EAAE,GAAG;AAAA;AAAA,0DAAwB,IAAxB,EAA8BD,SAA9B,EAAyCH,MAAzC,CAAX,CAL8B,CAM9B;;AACAI,UAAAA,EAAE,CAACC,IAAH;AACH;;AAEDC,QAAAA,YAAY,CAACN,MAAD,EAAiB;AACzB,eAAKF,OAAL,GAAeE,MAAf;AACA,eAAKJ,aAAL;AACH;;AA1B+B,O","sourcesContent":["import {_decorator, Component, Node, Prefab, instantiate, EventMouse, Touch, Vec2, Vec3, Button} from 'cc';\nimport { Card } from './Card';\nimport { CARDS_ARRAY } from './GameConstant';\nimport { GameManager } from './GameManager';\n\nimport { PileMaxFanOperation } from './PileMaxFanOperation';\nimport ReaveldCard from './ReaveldCard';\nconst { ccclass, property } = _decorator;\n\n@ccclass('Pile')\nexport class Pile extends Component {\n\n    @property(GameManager)\n    game: GameManager;\n\n    public cardsChanged = () => { };\n    public maxFanChanged = () => { };\n    private cards_: Card[] = [];\n    public get length() {\n        return this.cards_.length\n    }\n    private maxFan_: number = 999;\n    public get maxFan() { return this.maxFan_; }\n    public set maxFan(maxFan: number) {\n        maxFan = Math.max(0, maxFan);\n        if (this.maxFan_ === maxFan)\n            return;\n        const oldMaxFan = this.maxFan_;\n        const op = new PileMaxFanOperation(this, oldMaxFan, maxFan);\n        //this.game.addundoableOP(op);\n        op.redo();\n    }\n   \n    dotSetMaxFan(maxFan: number) {\n        this.maxFan_ = maxFan;\n        this.maxFanChanged();\n    }\n\n}"]}