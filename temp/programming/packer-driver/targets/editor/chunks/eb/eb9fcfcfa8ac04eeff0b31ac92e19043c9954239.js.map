{"version":3,"sources":["file:///D:/GAMIXLABS/Solitaire/assets/Script/GameScreen.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Button","math","Collider2D","Collider","Contact2DType","PhysicsSystem2D","DCard","CARDS_ARRAY","Pile","ReaveldCard","ccclass","property","window","moveCard","GameScreen","allCardsArrays","SuffeledArray","h","h2","lastindex","count","initiallyGeneratedCard","playingCard","onLaod","stackcoll","start","instance","enable","Shuffel","generateAllCards","initilizeStack","OnClick","deck","node","active","interactable","deckCard","on","removeParentFrokmdeck","OnResetDeck","reaveldCard","removeAllChildren","cardArray","card","addChild","getComponent","faceDown","push","console","log","children","removeListener","i","cardStaks","defaultPlayArea","onBeginContact","self","other","arr","length","cardPrefeb","init","data","currIndex","randomInadex","Math","floor","random","stack","stackNumber","stack1","stack2","stack3","stack4","stack5","stack6","stack7","delay","milliseconds","Promise","resolve","setTimeout","onDisable","pile","coll","off","BEGIN_CONTACT"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Prefab, instantiate, EventMouse, Touch, Vec2, Vec3, Button, math, Collider2D, ICollisionEvent, Collider, BoxCollider2D, Contact2DType, IPhysics2DContact, PhysicsSystem2D, } from 'cc';\nimport { Card } from './Card';\nimport { Ranks, Colour, Suits, cardMove, DCard } from './GameConstant';\nimport { CARDS_ARRAY, CardType } from './GameConstant';\nimport { Pile } from './Pile';\nimport ReaveldCard from './ReaveldCard';\nconst { ccclass, property } = _decorator;\ndeclare global {\n    interface Window {\n        moveCard: boolean;\n    }\n}\nwindow.moveCard = false;\n\n@ccclass('GameScreen')\nexport class GameScreen extends Component {\n    @property(Prefab)\n    cardPrefeb: Prefab;\n\n    @property(Node)\n    reaveldCard: Node;\n\n    @property(Button)\n    deck: Button;\n\n    @property(Node)\n    resetdeckButton: Node;\n\n    @property(Node)\n    stack1: Node\n\n    @property(Node)\n    stack2: Node\n\n    @property(Node)\n    stack3: Node\n\n    @property(Node)\n    stack4: Node\n\n    @property(Node)\n    stack5: Node\n\n    @property(Node)\n    stack6: Node\n\n    @property(Node)\n    stack7: Node\n\n\n    public allCardsArrays: Node[] = [];\n    public SuffeledArray: any[] = [];\n    public h: any\n    public h2: any[] = [];\n    public lastindex: any;\n    count: number;\n    initiallyGeneratedCard = 0;\n    playingCard: void;\n\n\n    // instantiationOfStack=true;\n\n    onLaod() {\n        this.stackcoll();\n\n    }\n    start() {\n        PhysicsSystem2D.instance.enable = true;\n        this.SuffeledArray = CARDS_ARRAY;\n        this.Shuffel(this.SuffeledArray);\n        this.generateAllCards(this.SuffeledArray);\n        this.initilizeStack();\n    }\n\n    OnClick() {\n\n        if (this.initiallyGeneratedCard == 52) {\n            this.deck.node.active = false\n            this.deck.interactable = false;\n        }\n        else {\n            this.deckCard(this.allCardsArrays);\n            DCard.on(\"fromDeck\", this.removeParentFrokmdeck, this);\n        }\n    }\n    OnResetDeck() {\n        // console.log(this.reaveldCard.children);\n        this.reaveldCard.removeAllChildren();\n        this.initiallyGeneratedCard = this.count;\n        this.deck.node.active = true;\n        this.deck.interactable = true;\n    }\n\n    deckCard(cardArray) {\n        //console.log(\"card Array +\", cardArray[cardArray.length - 1]);\n\n        let card = cardArray[this.initiallyGeneratedCard++];\n        this.reaveldCard.addChild(card);\n        card.getComponent(ReaveldCard).faceDown.active = false;\n        this.h = this.h2.push(card);\n        console.log(this.reaveldCard.children);\n\n        // console.log(\"length\", this.h);\n    }\n    removeParentFrokmdeck(card) {\n\n        // this.reaveldCard.removeChild(card);\n\n        DCard.removeListener(\"fromDeck\", this.removeParentFrokmdeck, this)\n        // console.log(\"removed\", card)\n        //console.log(\"removed\", card)\n\n        // console.log(\"child\", this.reaveldCard.removeChild(card));\n    }\n    stackcoll() {\n        console.log(\"sdcghshgsds\");\n        for (let i = 0; i <= 7; i++) {\n            let cardStaks = this.defaultPlayArea(i).getComponent(Collider)\n            cardStaks.on(\"onCollisionEnter\", this.onBeginContact, this);\n        }\n    }\n\n    onBeginContact(self: Collider2D, other: Collider2D) {\n        console.log(\"self\", self);\n        console.log(\"other\", other);\n    }\n\n\n\n    generateAllCards(cardArray) {\n        let arr = [...cardArray]\n        for (let i = 0; i < arr.length; i++) {\n            let card = instantiate(this.cardPrefeb);\n            card.getComponent(ReaveldCard).init(arr[i]);\n            this.allCardsArrays.push(card);\n        }\n    }\n    Shuffel(data) {\n        let currIndex = data.length, randomInadex;\n        while (currIndex != 0) {\n            randomInadex = Math.floor(math.random() * currIndex);\n            currIndex--;\n            [data[currIndex], data[randomInadex]] = [data[randomInadex], data[currIndex]];\n        }\n        return data;\n    }\n    initilizeStack() {\n        this.count = 0;\n        for (let i = 0; i < 7; i++) {\n            this.count += i;\n            let stack = this.defaultPlayArea(i + 1).getComponent(Pile)\n            stack.init(this.allCardsArrays, i + 1, this.count)\n        }\n        this.count += 7;\n        this.initiallyGeneratedCard = this.count;\n    }\n    defaultPlayArea(stackNumber) {\n        switch (stackNumber) {\n            case 1:\n                return this.stack1;\n            case 2:\n                return this.stack2;\n            case 3:\n                return this.stack3;\n            case 4:\n                return this.stack4;\n            case 5:\n                return this.stack5;\n            case 6:\n                return this.stack6;\n            case 7:\n                return this.stack7;\n        }\n    }\n    delay(milliseconds: number, count): Promise<number> {\n        return new Promise<number>(resolve => {\n            setTimeout(() => {\n                resolve(count);\n            }, milliseconds);\n        });\n    }\n\n    onDisable() {\n        for (let i = 0; i <= 7; i++) {\n            let pile = this.defaultPlayArea(i)\n            let coll = pile.getComponent(Collider2D);\n            coll.off(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n        }\n    }\n\n    //     sortByRank(cardArray) {\n    //         let arr = [...cardArray]\n    // for(let i=0;i<arr.length;i++){\n\n    // }\n\n    // }\n\n}\n"]}