{"version":3,"sources":["file:///D:/GAMIXLABS/Solitaire/assets/Script/ReaveldCard.ts"],"names":["_decorator","Component","Node","Label","Vec2","Vec3","Color","cardMove","DCard","Ranks","ccclass","property","ReaveldCard","cardColor","cardace","cardNumber","touchStart","offSet","newPosition","lastPosition","zoomPercentage","lastZoomPercentage","gameS","parentToCheck","rank","onLaod","init","data","cardFace","string","suit","cardRank","cardRank2","color","node","on","EventType","TOUCH_START","onTouchStart","bind","TOUCH_MOVE","onMoveStart","TOUCH_END","onTouchEnd","MatchingAlgo","e","getUILocation","subtract","getParent","getPosition","name","nodePos","setPosition","x","y","window","moveCard","p","toString","emit","Ace","console","log"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, TERRAIN_HEIGHT_BASE, color, Label, Vec2, Vec3, Touch, Color, math, systemEvent } from 'cc';\r\nimport { SUPPORT_JIT } from 'cc/env';\r\nimport { cardMove, Colour, DCard, Ranks, Suits } from './GameConstant';\r\nimport { GameScreen } from './GameScreen';\r\nconst { ccclass, property } = _decorator;\r\n\r\n\r\n@ccclass('ReaveldCard')\r\nexport default class ReaveldCard extends Component {\r\n    @property(Label)\r\n    cardRank: Label;\r\n    @property(Label)\r\n    cardRank2: Label;\r\n    @property(Label)\r\n    cardFace: Label;\r\n    @property(Node)\r\n    faceUp: Node;\r\n    @property(Node)\r\n    faceDown: Node;\r\n\r\n    public cardColor: string;\r\n    public cardace: string;\r\n    public cardNumber: string;\r\n    public touchStart = new Vec2();\r\n    public offSet = new Vec2();\r\n    public newPosition = new Vec3();\r\n    public lastPosition = new Vec2()\r\n    public zoomPercentage = 100;\r\n    public lastZoomPercentage = 100;\r\n    public gameS: GameScreen;\r\n    parentToCheck: string;\r\n    public readonly rank: Ranks;\r\n\r\n\r\n\r\n    onLaod() {\r\n    }\r\n    init(data) {\r\n        // let get = this.game.Shuffel(data)\r\n        // console.log(get);\r\n\r\n        this.cardFace.string = data.suit;\r\n        this.cardRank.string = data.rank;\r\n        this.cardRank2.string = data.rank;\r\n        this.cardNumber = data.rank;\r\n        if (this.cardFace.string == 'â™¥' || this.cardFace.string == 'â™¦') {\r\n            this.cardace = data.suit;\r\n            this.cardRank.color = new Color(255, 0, 0);\r\n            this.cardRank2.color = new Color(255, 0, 0);\r\n            this.cardFace.color = new Color(255, 0, 0);\r\n        }\r\n        else if (this.cardFace.string == 'â™ ' || this.cardFace.string == 'â™£') {\r\n            this.cardRank.color = new Color(0, 0, 0, 255);\r\n            this.cardRank2.color = new Color(0, 0, 0, 255);\r\n            this.cardFace.color = new Color(0, 0, 0, 255);\r\n        }\r\n        this.node.on(Node.EventType.TOUCH_START, this.onTouchStart.bind(this));\r\n        this.node.on(Node.EventType.TOUCH_MOVE, this.onMoveStart.bind(this));\r\n        this.node.on(Node.EventType.TOUCH_END, this.onTouchEnd.bind(this));\r\n        this.MatchingAlgo(data);\r\n        // console.log('s', data.rank)\r\n    }\r\n\r\n    onTouchStart(e: Touch) {\r\n\r\n\r\n        this.touchStart = e.getUILocation();\r\n        Vec2.subtract(this.offSet, this.node.getParent().getPosition() as unknown as Vec2, this.touchStart);\r\n        //  console.log(\"heyys\", this.cardace, this.cardNumber);\r\n        //console.log(\"Parent\", this.node)\r\n        this.parentToCheck = this.node.getParent().name;\r\n\r\n    }\r\n    onMoveStart(e: Touch | null) {\r\n        this.lastPosition = e.getUILocation();\r\n        Vec2.subtract(this.offSet, this.touchStart, this.lastPosition);\r\n        let nodePos = this.node.getPosition() as unknown as Vec2;\r\n        this.node.setPosition(nodePos.x - this.offSet.x, nodePos.y - this.offSet.y, 0.5);\r\n        this.touchStart = this.lastPosition;\r\n        // this.node.removeFromParent();\r\n        window.moveCard = true;\r\n    }\r\n    onTouchEnd(p: Touch) {\r\n        if (this.parentToCheck.toString() == 'ReavledCard') {\r\n            //console.log(\"herere_==><\")\r\n            DCard.emit(\"fromDeck\", this.node);\r\n        }\r\n        else {\r\n            // console.log(this.parentToCheck.toString());\r\n            cardMove.emit(\"snapCard\", this.node);\r\n        }\r\n    }\r\n\r\n    MatchingAlgo(data) {\r\n        if (data.rank == Ranks.Ace) {\r\n            console.log(\"hryeh\");\r\n\r\n        }\r\n        // data.sort((a, b) => {\r\n        //     if (a.data.rank > b.data.rank) return -1;\r\n        //     if (a.data.rank < b.data.rank) return 1;\r\n        // if (a.data.suit > b.data.suit) return -1;\r\n        // if (a.data.suit < b.data.suit) return 1;\r\n        // if (a.data.colour > b.data.colour) return -1;\r\n        // if (a.data.colour > b.data.colour) return 1;\r\n        // })\r\n    }\r\n}\r\n\r\n\r\n"]}