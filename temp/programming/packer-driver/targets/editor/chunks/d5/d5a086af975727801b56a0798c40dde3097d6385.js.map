{"version":3,"sources":["file:///D:/GAMIXLABS/Solitaire/assets/Script/GameController.ts"],"names":["_decorator","Component","Node","v2","ccclass","property","GameController","distance","touchStart","OnLoad","cardDeck","node","on","EventType","TOUCH_START","onTouchStart","bind","TOUCH_MOVE","onMoveStart","TOUCH_END","onTouchEnd","e","_allTouches","length","Vec2","_point","getUILocation","onMove","swapNode","isMoving","uiPosition","subtract","offSet","nodePos","getWorldPosition","xAsis","x","yAxis","y","zoomPercentDiff","zoomPercentage","lx","dy","uy","rx","newPosition","Vec3","start","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, v2 } from 'cc';\nimport Deck from './DeckOfCard'\nconst { ccclass, property } = _decorator;\n\n@ccclass('GameController')\nexport class GameController extends Component {\n\n    @property(Node)\n    cardDeck: Deck;\n    distance=0;\n    touchStart = new v2();\n\n\n\n\n    OnLoad() {\n        this.cardDeck.node.on(Node.EventType.TOUCH_START, this.onTouchStart.bind(this));\n        this.cardDeck.node.on(Node.EventType.TOUCH_MOVE, this.onMoveStart.bind(this));\n        this.cardDeck.node.on(Node.EventType.TOUCH_END, this.onTouchEnd.bind(this));\n    }\n    onTouchStart(e: Touch) {\n        // console.log('onTouchStart camera : ', e.getUILocation());\n        // this.touch = true;\n        if (e._allTouches.length == 2) {\n            this.distance = 0;\n            this.distance = Vec2.distance(e._allTouches[0]._point, e._allTouches[1]._point);\n        }\n        this.touchStart = e.getUILocation();\n\n    }\n    onMove(e: Touch) {\n        // this.lastPosition = this.node.getWorldPosition() as unknown as Vec2;\n       if (e._allTouches.length == 1) {\n\n            this.swapNode(e);\n            this.isMoving = true;\n        }\n    }\n    swapNode(e) {\n        // this.node.worldPosition = new Vec3(this.lastPosition.x, this.lastPosition.y, 0);\n        let uiPosition = e.getUILocation();\n        Vec2.subtract(this.offSet, uiPosition, this.onTouchStart);\n        this.touchStart = uiPosition;\n        let nodePos = this.node.getWorldPosition() as unknown as Vec2;\n        let xAsis = nodePos.x - this.offSet.x;\n        let yAxis = nodePos.y - this.offSet.y;\n        let zoomPercentDiff = this.zoomPercentage - 100;\n        const lx = (-540 + ((540 * zoomPercentDiff) / 100))\n        const dy = (420 + ((960 * zoomPercentDiff) / 100))\n        const uy = (1500 - ((960 * zoomPercentDiff) / 100))\n        const rx = (1620 - ((540 * zoomPercentDiff) / 100))\n        // console.log(\"zoomPercentDiff : \", zoomPercentDiff)\n        if ((xAsis < lx) && (yAxis < dy)) {\n            this.newPosition = new Vec3(lx, dy, 0);\n        }\n        else if ((xAsis < lx) && (yAxis > uy)) {\n            this.newPosition = new Vec3(lx, uy, 0);\n        }\n        else if ((xAsis > rx) && (yAxis < dy)) {\n            this.newPosition = new Vec3(rx, dy, 0);\n        }\n        else if ((xAsis > rx) && (yAxis > uy)) {\n            this.newPosition = new Vec3(rx, uy, 0);\n        }\n        else if (xAsis > rx) {\n            this.newPosition = new Vec3(rx, nodePos.y - this.offSet.y, 0);\n        }\n        else if (xAsis < lx) {\n            this.newPosition = new Vec3(lx, nodePos.y - this.offSet.y, 0);\n        }\n        else if (yAxis < dy) {\n            this.newPosition = new Vec3(nodePos.x - this.offSet.x, dy, 0);\n        }\n        else if (yAxis > uy) {\n            this.newPosition = new Vec3(nodePos.x - this.offSet.x, uy, 0);\n        }\n        else {\n            // console.log(\"xAxis yAxis : \", xAsis, yAxis);\n            this.newPosition = new Vec3(nodePos.x - this.offSet.x, nodePos.y - this.offSet.y, 0);\n        }\n    }\n\n    start() {\n    }\n\n    update(deltaTime: number) {\n\n    }\n}\n\n"]}