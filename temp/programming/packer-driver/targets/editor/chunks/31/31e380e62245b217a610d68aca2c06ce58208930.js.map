{"version":3,"sources":["file:///D:/GAMIXLABS/Solitaire/assets/Script/Card.ts"],"names":["_decorator","Component","ccclass","property","Card","pile","pileIndex","pileChanged","pileIndexChanged","faceUpChanged","faceUp_","faceUp","oldFaceUp","doSetFaceUp","onPileChanged","newPile","newPileIndex"],"mappings":";;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;;;;;;AAMrB;AACA;OAEM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBH,U;;sBAGjBI,I,WADZF,OAAO,CAAC,MAAD,C,gBAAR,MACaE,IADb,SAC0BH,SAD1B,CACoC;AAAA;AAAA;AAAA,eAC7BI,IAD6B;AAAA,eAE7BC,SAF6B,GAEjB,CAFiB;;AAAA,eAG7BC,WAH6B,GAGf,MAAI,CAAE,CAHS;;AAAA,eAI7BC,gBAJ6B,GAIZ,MAAI,CAAE,CAJM;;AAAA,eAK7BC,aAL6B,GAKf,MAAI,CAAE,CALS;;AAAA,eAM5BC,OAN4B,GAMpB,KANoB;AAAA;;AAOnB,YAANC,MAAM,GAAG;AAAE,iBAAO,KAAKD,OAAZ;AAAsB;;AAC3B,YAANC,MAAM,CAACA,MAAD,EAAgB;AAC7B,cAAG,KAAKD,OAAL,KAAeC,MAAlB,EACA;AACA,gBAAMC,SAAS,GAAC,KAAKF,OAArB,CAH6B,CAI7B;AACA;AACH;;AAEMG,QAAAA,WAAW,CAACF,MAAD,EAAkB;AAChC,eAAKD,OAAL,GAAeC,MAAf;AACA,eAAKF,aAAL;AACH;;AAEMK,QAAAA,aAAa,CAACC,OAAD,EAAcC,YAAd,EAAkC;AAClD,cAAG,KAAKX,IAAL,KAAYU,OAAf,EAAuB,CACnB;AACH,WAFD,MAGI;AACA,iBAAKV,IAAL,GAAUU,OAAV;AACA,iBAAKT,SAAL,GAAeU,YAAf;AACH;;AACD,cAAG,KAAKX,IAAR,EAAa,CAEZ;;AACD,eAAKE,WAAL;AACH;;AAjCmC,O","sourcesContent":["import { _decorator, Component, Node } from 'cc';\nimport { CARDS_ARRAY } from './GameConstant';\nimport { Colour, Ranks, Suits } from './GameConstant';\nimport { GameScreen } from './GameScreen';\nimport { Pile } from './Pile';\nimport ReaveldCard from './ReaveldCard';\n//const s52SuitsColors: [Suits, Color][] = [[Suits.SPADES, Color.Black],[Suits.CLUBS, Color.Black],[Suits.HEARTS, Color.Red], [Suits.DIAMONDS, Color.Red]];\n//const s52Ranks: Ranks[] = [Ranks.Ace, Ranks.Two, Ranks.Three, Ranks.Four, Ranks.Five, Ranks.Six, Ranks.Seven, Ranks.Eight, Ranks.Nine, Ranks.Ten, Ranks.Jack, Ranks.Queen, Ranks.King];\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('Card')\nexport class Card extends Component {\npublic pile:Pile;\npublic pileIndex = 0\npublic pileChanged = ()=>{};\npublic pileIndexChanged=()=>{};\npublic faceUpChanged=()=>{};\nprivate faceUp_=false;\npublic get faceUp() { return this.faceUp_; }\npublic set faceUp(faceUp:boolean){\n    if(this.faceUp_===faceUp)\n    return;\n    const oldFaceUp=this.faceUp_;\n    //const op=new\n    // \n}\n\npublic doSetFaceUp(faceUp: boolean) {\n    this.faceUp_ = faceUp;\n    this.faceUpChanged();\n}\n\npublic onPileChanged(newPile:Pile,newPileIndex:number){\n    if(this.pile===newPile){\n        //this.onPileChanged(newPileIndex);\n    }\n    else{\n        this.pile=newPile;\n        this.pileIndex=newPileIndex;\n    }\n    if(this.pile){\n\n    }\n    this.pileChanged();\n}\n\n\n\n}"]}