{"version":3,"sources":["file:///D:/GAMIXLABS/Solitaire/assets/Script/GameScreen.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Button","math","cardMove","CARDS_ARRAY","Pile","ReaveldCard","ccclass","property","window","moveCard","GameScreen","allCardsArrays","SuffeledArray","h","h2","lastindex","count","initiallyGeneratedCard","card","onLaod","start","Shuffel","generateAllCards","initilizeStack","OnClick","deck","node","active","interactable","deckCard","OnResetDeck","reaveldCard","removeAllChildren","cardArray","addChild","getComponent","faceDown","push","console","log","on","removeParentFrokmdeck","removeChild","snapCardToParent","arr","i","length","cardPrefeb","init","data","currIndex","randomInadex","Math","floor","random","stack","defaultPlayArea","stackNumber","stack1","stack2","stack3","stack4","stack5","stack6","stack7","delay","milliseconds","Promise","resolve","setTimeout"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Prefab, instantiate, EventMouse, Touch, Vec2, Vec3, Button, math, Collider2D, ICollisionEvent, Collider, BoxCollider2D, Contact2DType, IPhysics2DContact, PhysicsSystem2D, } from 'cc';\nimport { Card } from './Card';\nimport { Ranks, Colour, Suits, cardMove, snapCard } from './GameConstant';\nimport { CARDS_ARRAY, CardType } from './GameConstant';\nimport { Pile } from './Pile';\nimport ReaveldCard from './ReaveldCard';\nconst { ccclass, property } = _decorator;\ndeclare global {\n    interface Window {\n        moveCard: boolean;\n    }\n}\nwindow.moveCard = false;\n\n@ccclass('GameScreen')\nexport class GameScreen extends Component {\n    @property(Prefab)\n    cardPrefeb: Prefab;\n\n    @property(Node)\n    reaveldCard: Node;\n\n    @property(Button)\n    deck: (Button);\n\n    @property(Node)\n    resetdeckButton: (Node);\n\n    @property(Node)\n    stack1: Node\n\n    @property(Node)\n    stack2: Node\n\n    @property(Node)\n    stack3: Node\n\n    @property(Node)\n    stack4: Node\n\n    @property(Node)\n    stack5: Node\n\n    @property(Node)\n    stack6: Node\n\n    @property(Node)\n    stack7: Node\n\n\n    public allCardsArrays: Node[] = [];\n    public SuffeledArray: any[] = [];\n    public h: any\n    public h2: any[] = [];\n    public lastindex: any;\n    count: number;\n    initiallyGeneratedCard = 0;\n    card: any;\n\n\n    // instantiationOfStack=true;\n\n    onLaod() {\n\n    }\n    start() {\n        this.SuffeledArray = CARDS_ARRAY;\n        this.Shuffel(this.SuffeledArray);\n        this.generateAllCards(this.SuffeledArray);\n        this.initilizeStack();\n    }\n    OnClick() {\n\n        if (this.initiallyGeneratedCard == 52) {\n            this.deck.node.active = false\n            this.deck.interactable = false;\n        }\n        else {\n            this.deckCard(this.allCardsArrays);\n        }\n    }\n    OnResetDeck() {\n        this.reaveldCard.removeAllChildren();\n        this.initiallyGeneratedCard = this.count;\n        this.deck.node.active = true;\n        this.deck.interactable = true;\n    }\n\n    deckCard(cardArray) {\n        this.card = cardArray[this.initiallyGeneratedCard++];\n        this.reaveldCard.addChild(this.card);\n        this.card.getComponent(ReaveldCard).faceDown.active = false;\n        this.h = this.h2.push(this.card);\n        console.log(\"length\", this.h)\n        cardMove.on(\"snapCard\", this.removeParentFrokmdeck, this);\n\n    }\n    removeParentFrokmdeck() {\n        console.log(\"removed\")\n        this.reaveldCard.removeChild(this.card);\n        //cardMove.removeListener(\"snapCard\", this.removeParentFrokmdeck, this)\n        this.getComponent(Pile).snapCardToParent(this.card);\n    }\n\n\n\n    generateAllCards(cardArray) {\n        let arr = [...cardArray]\n        for (let i = 0; i < arr.length; i++) {\n            let card = instantiate(this.cardPrefeb);\n            card.getComponent(ReaveldCard).init(arr[i]);\n            this.allCardsArrays.push(card);\n        }\n    }\n    Shuffel(data) {\n        let currIndex = data.length, randomInadex;\n        while (currIndex != 0) {\n            randomInadex = Math.floor(math.random() * currIndex);\n            currIndex--;\n            [data[currIndex], data[randomInadex]] = [data[randomInadex], data[currIndex]];\n        }\n        return data;\n    }\n    initilizeStack() {\n        this.count = 0;\n        for (let i = 1; i <= 7; i++) {\n            this.count += i;\n            let stack = this.defaultPlayArea(i).getComponent(Pile)\n            stack.init(this.allCardsArrays, i, this.count)\n        }\n        this.count += 7;\n        this.initiallyGeneratedCard = this.count;\n    }\n    defaultPlayArea(stackNumber) {\n        switch (stackNumber) {\n            case 1:\n                return this.stack1;\n            case 2:\n                return this.stack2;\n            case 3:\n                return this.stack3;\n            case 4:\n                return this.stack4;\n            case 5:\n                return this.stack5;\n            case 6:\n                return this.stack6;\n            case 7:\n                return this.stack7;\n        }\n    }\n    delay(milliseconds: number, count): Promise<number> {\n        return new Promise<number>(resolve => {\n            setTimeout(() => {\n                resolve(count);\n            }, milliseconds);\n        });\n    }\n    //     sortByRank(cardArray) {\n    //         let arr = [...cardArray]\n    // for(let i=0;i<arr.length;i++){\n\n    // }\n\n    // }\n\n}\n"]}