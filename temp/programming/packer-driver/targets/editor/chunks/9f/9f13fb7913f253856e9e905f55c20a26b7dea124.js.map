{"version":3,"sources":["file:///D:/GAMIXLABS/Solitaire/assets/Script/GameScreen.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Button","math","Collider2D","Contact2DType","DCard","CARDS_ARRAY","Pile","ReaveldCard","ccclass","property","window","moveCard","GameScreen","allCardsArrays","SuffeledArray","h","h2","lastindex","count","initiallyGeneratedCard","playingCard","onLaod","start","Shuffel","generateAllCards","initilizeStack","stackcoll","OnClick","deck","node","active","interactable","deckCard","on","removeParentFrokmdeck","OnResetDeck","reaveldCard","removeAllChildren","cardArray","card","addChild","getComponent","faceDown","push","console","log","children","removeListener","i","pile","defaultPlayArea","coll","BEGIN_CONTACT","onBeginContact","self","other","arr","length","cardPrefeb","init","data","currIndex","randomInadex","Math","floor","random","stack","stackNumber","stack1","stack2","stack3","stack4","stack5","stack6","stack7","delay","milliseconds","Promise","resolve","setTimeout","onDisable","off"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Prefab, instantiate, EventMouse, Touch, Vec2, Vec3, Button, math, Collider2D, ICollisionEvent, Collider, BoxCollider2D, Contact2DType, IPhysics2DContact, PhysicsSystem2D, } from 'cc';\nimport { Card } from './Card';\nimport { Ranks, Colour, Suits, cardMove, DCard } from './GameConstant';\nimport { CARDS_ARRAY, CardType } from './GameConstant';\nimport { Pile } from './Pile';\nimport ReaveldCard from './ReaveldCard';\nconst { ccclass, property } = _decorator;\ndeclare global {\n    interface Window {\n        moveCard: boolean;\n    }\n}\nwindow.moveCard = false;\n\n@ccclass('GameScreen')\nexport class GameScreen extends Component {\n    @property(Prefab)\n    cardPrefeb: Prefab;\n\n    @property(Node)\n    reaveldCard: Node;\n\n    @property(Button)\n    deck: Button;\n\n    @property(Node)\n    resetdeckButton: Node;\n\n\n    @property(Node)\n    stack1: Node\n\n    @property(Node)\n    stack2: Node\n\n    @property(Node)\n    stack3: Node\n\n    @property(Node)\n    stack4: Node\n\n    @property(Node)\n    stack5: Node\n\n    @property(Node)\n    stack6: Node\n\n    @property(Node)\n    stack7: Node\n\n\n    public allCardsArrays: Node[] = [];\n    public SuffeledArray: any[] = [];\n    public h: any\n    public h2: any[] = [];\n    public lastindex: any;\n    count: number;\n    initiallyGeneratedCard = 0;\n    playingCard: void;\n\n\n    // instantiationOfStack=true;\n\n    onLaod() {\n\n    }\n    start() {\n        this.SuffeledArray = CARDS_ARRAY;\n        this.Shuffel(this.SuffeledArray);\n        this.generateAllCards(this.SuffeledArray);\n        this.initilizeStack();\n        this.stackcoll();\n    }\n\n    OnClick() {\n\n        if (this.initiallyGeneratedCard == 52) {\n            this.deck.node.active = false\n            this.deck.interactable = false;\n        }\n        else {\n            this.deckCard(this.allCardsArrays);\n            DCard.on(\"fromDeck\", this.removeParentFrokmdeck, this);\n        }\n    }\n    OnResetDeck() {\n        // console.log(this.reaveldCard.children);\n        this.reaveldCard.removeAllChildren();\n        this.initiallyGeneratedCard = this.count;\n        this.deck.node.active = true;\n        this.deck.interactable = true;\n    }\n\n    deckCard(cardArray) {\n        //console.log(\"card Array +\", cardArray[cardArray.length - 1]);\n\n        let card = cardArray[this.initiallyGeneratedCard++];\n        this.reaveldCard.addChild(card);\n        card.getComponent(ReaveldCard).faceDown.active = false;\n        this.h = this.h2.push(card);\n        console.log(this.reaveldCard.children);\n\n        // console.log(\"length\", this.h);\n    }\n    removeParentFrokmdeck(card) {\n\n        // this.reaveldCard.removeChild(card);\n\n        DCard.removeListener(\"fromDeck\", this.removeParentFrokmdeck, this)\n        // console.log(\"removed\", card)\n        //console.log(\"removed\", card)\n\n        // console.log(\"child\", this.reaveldCard.removeChild(card));\n    }\n    stackcoll() {\n        for (let i = 0; i <= 7; i++) {\n            let pile = this.defaultPlayArea(i)\n            let coll = pile.getComponent(Collider2D);\n            coll.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n        }\n    }\n\n    onBeginContact(self: Collider2D, other: Collider2D) {\n\n        console.log(\"self\", self);\n        console.log(\"other\", other);\n    }\n\n\n\n    generateAllCards(cardArray) {\n        let arr = [...cardArray]\n        for (let i = 0; i < arr.length; i++) {\n            let card = instantiate(this.cardPrefeb);\n            card.getComponent(ReaveldCard).init(arr[i]);\n            this.allCardsArrays.push(card);\n        }\n    }\n    Shuffel(data) {\n        let currIndex = data.length, randomInadex;\n        while (currIndex != 0) {\n            randomInadex = Math.floor(math.random() * currIndex);\n            currIndex--;\n            [data[currIndex], data[randomInadex]] = [data[randomInadex], data[currIndex]];\n        }\n        return data;\n    }\n    initilizeStack() {\n        this.count = 0;\n        for (let i = 0; i < 7; i++) {\n            this.count += i;\n            let stack = this.defaultPlayArea(i + 1).getComponent(Pile)\n            stack.init(this.allCardsArrays, i + 1, this.count)\n        }\n        this.count += 7;\n        this.initiallyGeneratedCard = this.count;\n    }\n    defaultPlayArea(stackNumber) {\n        switch (stackNumber) {\n            case 1:\n                return this.stack1;\n            case 2:\n                return this.stack2;\n            case 3:\n                return this.stack3;\n            case 4:\n                return this.stack4;\n            case 5:\n                return this.stack5;\n            case 6:\n                return this.stack6;\n            case 7:\n                return this.stack7;\n        }\n    }\n    delay(milliseconds: number, count): Promise<number> {\n        return new Promise<number>(resolve => {\n            setTimeout(() => {\n                resolve(count);\n            }, milliseconds);\n        });\n    }\n\n    onDisable() {\n        for (let i = 0; i <= 7; i++) {\n            let pile = this.defaultPlayArea(i)\n            let coll = pile.getComponent(Collider2D);\n            coll.off(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n        }\n    }\n\n    //     sortByRank(cardArray) {\n    //         let arr = [...cardArray]\n    // for(let i=0;i<arr.length;i++){\n\n    // }\n\n    // }\n\n}\n"]}