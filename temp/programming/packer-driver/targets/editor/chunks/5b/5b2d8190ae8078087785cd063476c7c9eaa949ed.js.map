{"version":3,"sources":["file:///D:/GAMIXLABS/Solitaire/assets/Script/GameScreen.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Button","math","CARDS_ARRAY","GameManager","ReaveldCard","ccclass","property","window","moveCard","GameScreen","arrayOfCard","arrayOfCard2","h","h2","lastindex","onLaod","start","Shuffel","stack","OnClick","deck","interactable","creatCard","card","cardPrefeb","reaveldCard","addChild","getComponent","init","splice","push","console","log","faceDown","active","data","currIndex","length","randomInadex","Math","floor","random","stacklogic","num","i","card1","delay","lastCard","children","defaultPlayArea","stackNumber","stack1","stack2","stack3","stack4","stack5","stack6","stack7","milliseconds","count","Promise","resolve","setTimeout"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Prefab, instantiate, EventMouse, Touch, Vec2, Vec3, Button, math, Collider2D, ICollisionEvent, Collider, BoxCollider2D, Contact2DType, IPhysics2DContact, PhysicsSystem2D, } from 'cc';\nimport { Card } from './Card';\n\nimport { CARDS_ARRAY, CardType } from './GameConstant';\nimport { GameManager } from './GameManager';\nimport ReaveldCard from './ReaveldCard';\nconst { ccclass, property } = _decorator;\ndeclare global {\n    interface Window {\n        moveCard: boolean;\n    }\n}\nwindow.moveCard = false;\n\n@ccclass('GameScreen')\nexport class GameScreen extends Component {\n    @property(Prefab)\n    cardPrefeb: Prefab;\n    @property(Node)\n    reaveldCard: Node;\n    @property(Button)\n    deck: (Button);\n    @property(GameManager)\n    game: GameManager;\n    @property(Node)\n    mainArea: Node\n    @property(Node)\n    stack1: Node\n    @property(Node)\n    stack2: Node\n    @property(Node)\n    stack3: Node\n    @property(Node)\n    stack4: Node\n    @property(Node)\n    stack5: Node\n    @property(Node)\n    stack6: Node\n    @property(Node)\n    stack7: Node\n\n\n\n    arrayOfCard: any[] = [];\n    arrayOfCard2: any[] = [];\n    h: any\n    h2: any\n    lastindex: any;\n\n\n    // instantiationOfStack=true;\n\n    onLaod() {\n\n    }\n    start() {\n        this.arrayOfCard2 = CARDS_ARRAY;\n        this.Shuffel(this.arrayOfCard2);\n        this.stack();\n    }\n    OnClick() {\n\n        if (this.h == 52) {\n\n            this.deck.interactable = false;\n        }\n        else {\n            this.creatCard();\n\n        }\n        // console.log(\"here-->\", this.h)\n        // this.getComponent(Card).init();\n    }\n\n\n    creatCard() {\n        //console.log(\"dhoom dhoom\");\n        // for (let i = 0; i < 1; i++) {\n        let card = instantiate(this.cardPrefeb);\n        this.reaveldCard.addChild(card);\n        card.getComponent(ReaveldCard).init(this.arrayOfCard2[0]);\n        this.arrayOfCard2.splice(0, 1);\n        // console.log(\"heere-->\", this.arrayOfCard2.length)\n        this.h = this.arrayOfCard.push(card);\n        console.log(\"Array\", this.h);\n        card.getComponent(ReaveldCard).faceDown.active = false;\n    }\n\n    Shuffel(data) {\n        let currIndex = data.length, randomInadex;\n        while (currIndex != 0) {\n            randomInadex = Math.floor(math.random() * currIndex);\n            currIndex--;\n            [data[currIndex], data[randomInadex]] = [data[randomInadex], data[currIndex]];\n        }\n        return data;\n    }\n    async stacklogic(stack: Node, num) {\n\n        for (let i = 0; i < num; i++) {\n            let card1 = instantiate(this.cardPrefeb);\n            card1.getComponent(ReaveldCard).init(this.arrayOfCard2[0]);\n            this.arrayOfCard2.splice(0, 1);\n            await this.delay(200, stack.addChild(card1));\n            this.h2 = this.arrayOfCard.push(card1);\n        }\n        let lastCard: ReaveldCard = stack.children[stack.children.length - 1].getComponent(ReaveldCard)\n        lastCard.faceDown.active = false;\n        // lastCard.faceUp.active = true;\n        // console.log(\"last\", this.lastindex);\n        //console.log(\"array\", this.h2);\n    }\n\n    stack() {\n        for (let i = 1; i <= 7; i++) {\n            let stack = this.defaultPlayArea(i)\n            this.stacklogic(stack, i)\n        }\n    }\n    defaultPlayArea(stackNumber) {\n        // let stack: number;\n        switch (stackNumber) {\n\n            case 1:\n                return this.stack1\n\n            case 2:\n                return this.stack2\n\n            case 3:\n                return this.stack3\n\n            case 4:\n                return this.stack4\n\n            case 5:\n                return this.stack5\n\n            case 6:\n                return this.stack6\n\n            case 7:\n                return this.stack7\n\n        }\n    }\n    delay(milliseconds: number, count): Promise<number> {\n        return new Promise<number>(resolve => {\n            setTimeout(() => {\n                resolve(count);\n            }, milliseconds);\n        });\n    }\n\n\n\n}\n"]}