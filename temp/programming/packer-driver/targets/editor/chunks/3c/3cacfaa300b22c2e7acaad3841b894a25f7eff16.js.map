{"version":3,"sources":["file:///D:/GAMIXLABS/Solitaire/assets/Script/GameScreen.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Button","math","CARDS_ARRAY","GameManager","Pile","ReaveldCard","ccclass","property","window","moveCard","GameScreen","allCardsArrays","SuffeledArray","h","h2","lastindex","count","onLaod","start","Shuffel","generateAllCards","initilizeStack","OnClick","deck","interactable","deckCard","cardArray","card","reaveldCard","addChild","getComponent","faceDown","active","arr","i","length","cardPrefeb","init","push","data","currIndex","randomInadex","Math","floor","random","stack","defaultPlayArea","stackNumber","stack1","stack2","stack3","stack4","stack5","stack6","stack7","delay","milliseconds","Promise","resolve","setTimeout"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Prefab, instantiate, EventMouse, Touch, Vec2, Vec3, Button, math, Collider2D, ICollisionEvent, Collider, BoxCollider2D, Contact2DType, IPhysics2DContact, PhysicsSystem2D, } from 'cc';\nimport { Card } from './Card';\n\nimport { CARDS_ARRAY, CardType } from './GameConstant';\nimport { GameManager } from './GameManager';\nimport { Pile } from './Pile';\nimport ReaveldCard from './ReaveldCard';\nconst { ccclass, property } = _decorator;\ndeclare global {\n    interface Window {\n        moveCard: boolean;\n    }\n}\nwindow.moveCard = false;\n\n@ccclass('GameScreen')\nexport class GameScreen extends Component {\n    @property(Prefab)\n    cardPrefeb: Prefab;\n    @property(Node)\n    reaveldCard: Node;\n    @property(Button)\n    deck: (Button);\n    @property(GameManager)\n    game: GameManager;\n    @property(Node)\n    mainArea: Node\n    @property(Node)\n    stack1: Node\n    @property(Node)\n    stack2: Node\n    @property(Node)\n    stack3: Node\n    @property(Node)\n    stack4: Node\n    @property(Node)\n    stack5: Node\n    @property(Node)\n    stack6: Node\n    @property(Node)\n    stack7: Node\n\n\n    public allCardsArrays: Node[] = [];\n    public SuffeledArray: any[] = [];\n    public h: any\n    public h2: any\n    public lastindex: any;\n    count: number;\n\n\n    // instantiationOfStack=true;\n\n    onLaod() {\n\n    }\n    start() {\n        this.SuffeledArray = CARDS_ARRAY;\n        this.Shuffel(this.SuffeledArray);\n        this.generateAllCards(this.SuffeledArray);\n        this.initilizeStack();\n    }\n    OnClick() {\n\n        if (this.count == 52) {\n            this.deck.interactable = false;\n        }\n        else {\n            this.deckCard(this.allCardsArrays);\n        }\n    }\n    deckCard(cardArray) {\n        let card = cardArray[this.count++];\n        this.reaveldCard.addChild(card);\n        card.getComponent(ReaveldCard).faceDown.active = false;\n\n    }\n\n    generateAllCards(cardArray) {\n        let arr = [...cardArray]\n        for (let i = 0; i < arr.length; i++) {\n            let card = instantiate(this.cardPrefeb);\n            card.getComponent(ReaveldCard).init(arr[i]);\n            this.allCardsArrays.push(card);\n        }\n    }\n    Shuffel(data) {\n        let currIndex = data.length, randomInadex;\n        while (currIndex != 0) {\n            randomInadex = Math.floor(math.random() * currIndex);\n            currIndex--;\n            [data[currIndex], data[randomInadex]] = [data[randomInadex], data[currIndex]];\n        }\n        return data;\n    }\n    initilizeStack() {\n        this.count = 0;\n        for (let i = 1; i <= 7; i++) {\n            this.count += i;\n            let stack = this.defaultPlayArea(i).getComponent(Pile)\n            stack.init(this.allCardsArrays, i, this.count)\n        }\n        this.count += 7;\n    }\n    defaultPlayArea(stackNumber) {\n        switch (stackNumber) {\n\n            case 1:\n                return this.stack1\n\n            case 2:\n                return this.stack2\n\n            case 3:\n                return this.stack3\n\n            case 4:\n                return this.stack4\n\n            case 5:\n                return this.stack5\n\n            case 6:\n                return this.stack6\n\n            case 7:\n                return this.stack7\n\n        }\n    }\n    delay(milliseconds: number, count): Promise<number> {\n        return new Promise<number>(resolve => {\n            setTimeout(() => {\n                resolve(count);\n            }, milliseconds);\n        });\n    }\n\n\n\n}\n"]}