{"version":3,"sources":["file:///D:/GAMIXLABS/Solitaire/assets/Script/GameScreen.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Button","math","CARDS_ARRAY","GameManager","Pile","ReaveldCard","ccclass","property","window","moveCard","GameScreen","arrayOfCard","arrayCards","arrayOfCard2","h","h2","lastindex","onLaod","start","generateAllCards","Shuffel","initilizeStack","OnClick","deck","interactable","creatCard","cardArray","arr","i","length","card","cardPrefeb","getComponent","init","push","data","currIndex","randomInadex","Math","floor","random","stacklogic","stack","num","card1","splice","delay","addChild","lastCard","children","faceDown","active","count","defaultPlayArea","stackNumber","stack1","stack2","stack3","stack4","stack5","stack6","stack7","milliseconds","Promise","resolve","setTimeout"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Prefab, instantiate, EventMouse, Touch, Vec2, Vec3, Button, math, Collider2D, ICollisionEvent, Collider, BoxCollider2D, Contact2DType, IPhysics2DContact, PhysicsSystem2D, } from 'cc';\nimport { Card } from './Card';\n\nimport { CARDS_ARRAY, CardType } from './GameConstant';\nimport { GameManager } from './GameManager';\nimport { Pile } from './Pile';\nimport ReaveldCard from './ReaveldCard';\nconst { ccclass, property } = _decorator;\ndeclare global {\n    interface Window {\n        moveCard: boolean;\n    }\n}\nwindow.moveCard = false;\n\n@ccclass('GameScreen')\nexport class GameScreen extends Component {\n    @property(Prefab)\n    cardPrefeb: Prefab;\n    @property(Node)\n    reaveldCard: Node;\n    @property(Button)\n    deck: (Button);\n    @property(GameManager)\n    game: GameManager;\n    @property(Node)\n    mainArea: Node\n    @property(Node)\n    stack1: Node\n    @property(Node)\n    stack2: Node\n    @property(Node)\n    stack3: Node\n    @property(Node)\n    stack4: Node\n    @property(Node)\n    stack5: Node\n    @property(Node)\n    stack6: Node\n    @property(Node)\n    stack7: Node\n\n\n\n    arrayOfCard: any[] = [];\n    arrayCards: Node[] = [];\n    arrayOfCard2: any[] = [];\n    h: any\n    h2: any\n    lastindex: any;\n\n\n    // instantiationOfStack=true;\n\n    onLaod() {\n\n    }\n    start() {\n        this.arrayOfCard2 = CARDS_ARRAY;\n        this.generateAllCards(CARDS_ARRAY);\n        this.Shuffel(this.arrayOfCard2);\n        this.initilizeStack();\n    }\n    OnClick() {\n\n        if (this.h == 52) {\n\n            this.deck.interactable = false;\n        }\n        else {\n            this.creatCard();\n\n        }\n        // console.log(\"here-->\", this.h)\n        // this.getComponent(Card).init();\n    }\n\n\n    // creatCard() {\n    //     //console.log(\"dhoom dhoom\");\n    //     // for (let i = 0; i < 1; i++) {\n    //     let card = instantiate(this.cardPrefeb);\n    //     this.reaveldCard.addChild(card);\n    //     card.getComponent(ReaveldCard).init(this.arrayOfCard2[0]);\n    //     this.arrayOfCard2.splice(0, 1);\n    //     // console.log(\"heere-->\", this.arrayOfCard2.length)\n    //     this.h = this.arrayOfCard.push(card);\n    //     console.log(\"Array\", this.h);\n    //     card.getComponent(ReaveldCard).faceDown.active = false;\n    // }\n    generateAllCards(cardArray) {\n        let arr = [...cardArray]\n        for (let i = 0; i < arr.length; i++) {\n            let card = instantiate(this.cardPrefeb);\n            // this.reaveldCard.addChild(card);\n            card.getComponent(ReaveldCard).init(arr[i]);\n            // this.arrayOfCard2.splice(0, 1);\n            this.arrayCards.push(card);\n            // console.log(\"Array\", this.h);\n            // card.getComponent(ReaveldCard).faceDown.active = false;\n        }\n    }\n\n    Shuffel(data) {\n        let currIndex = data.length, randomInadex;\n        while (currIndex != 0) {\n            randomInadex = Math.floor(math.random() * currIndex);\n            currIndex--;\n            [data[currIndex], data[randomInadex]] = [data[randomInadex], data[currIndex]];\n        }\n        return data;\n    }\n    async stacklogic(stack: Node, num) {\n\n        for (let i = 0; i < num; i++) {\n            let card1 = instantiate(this.cardPrefeb);\n            card1.getComponent(ReaveldCard).init(this.arrayOfCard2[0]);\n            this.arrayOfCard2.splice(0, 1);\n            await this.delay(200, stack.addChild(card1));\n            // this.h2 = this.arrayOfCard.push(card1);\n        }\n        let lastCard: ReaveldCard = stack.children[stack.children.length - 1].getComponent(ReaveldCard)\n        lastCard.faceDown.active = false;\n        // lastCard.faceUp.active = true;\n        // console.log(\"last\", this.lastindex);\n        //console.log(\"array\", this.h2);\n    }\n\n    // stack() {\n    //     for (let i = 1; i <= 7; i++) {\n    //         let stack = this.defaultPlayArea(i)\n    //         this.stacklogic(stack, i)\n    //     }\n    // }\n    initilizeStack() {\n        let count = 0;\n        for (let i = 1; i <= 7; i++) {\n            count += i;\n            let stack = this.defaultPlayArea(i).getComponent(Pile)\n            stack.init(this.arrayCards, i, count)\n        }\n    }\n    defaultPlayArea(stackNumber) {\n        // let stack: number;\n        switch (stackNumber) {\n\n            case 1:\n                return this.stack1\n\n            case 2:\n                return this.stack2\n\n            case 3:\n                return this.stack3\n\n            case 4:\n                return this.stack4\n\n            case 5:\n                return this.stack5\n\n            case 6:\n                return this.stack6\n\n            case 7:\n                return this.stack7\n\n        }\n    }\n    delay(milliseconds: number, count): Promise<number> {\n        return new Promise<number>(resolve => {\n            setTimeout(() => {\n                resolve(count);\n            }, milliseconds);\n        });\n    }\n\n\n\n}\n"]}